@startuml
!include <logos/postgresql>
!include <logos/mysql>
!include <logos/google-cloud-platform>
!include <logos/airflow>
!include <cloudinsight/ai>
!include <cloudinsight/java>
!include <cloudinsight/python>
!include <cloudinsight/bi>
!include <cloudinsight/hdfs>
!include <cloudinsight/file>
!include <cloudinsight/kafka>
!include <cloudinsight/hdfs>
!include <office/users/call_center_agent>

cloud "Clients" as source{
 component "Web/Mobile"
 component "Messaging/IVR"
}

node "Chat bot" {

 component "Chat API gateway" as chat_api 
note left of chat_api
AuthN/AuthZ (JWT, OAuth2).
Rate limiting, DoS protection.
Payload normalization & audit.
1st security boundary.
end note


 component "  <$java,color=blue>\nChat Agent\n\nInterprets intent â†’ turns into actions\nDialog manager + context store." as chat_agent #87ceeb {
 rectangle Redis
 }

 component "Escalation Manager" as em
 chat_agent --right--> em


 chat_api <--> chat_agent
component "<$ai>LLM" as llm {
 rectangle "<$python,color=orange>Llama Guard"
 rectangle "Vector Store"
}
note bottom of llm
NLU/NLG with PII redaction & guardrails.
Uses Vector Store (RAG) for facts.
Never calls enterprise APIs directly.
2nd security boundary.
end note
 chat_agent <--right--> llm
 component "<$bi>\nMonitoring" 
}
source <--down--> chat_api :request & \nnotification

node "Enterprise" {
 component "  <$hdfs,color=blue>\nETL Streaming" as ent_api #87ceeb 
note bottom of ent_api
Facade for Core Banking, CRM, Ticketing.
Enforce least-privilege scopes.
3rd security boundary.
end note
 chat_agent --down--> ent_api



 database "Data Warehouse" as dw
 ent_api --> dw
 database "<$hdfs>Data lake" as dl
 ent_api --> dl
 file "  <$file>\nInternal knowledge base" as file
 llm ..> file: trained on\nRAG
}
rectangle "<$call_center_agent>\noperator" as operator
em --right--> operator : X \n break the chat
@enduml
